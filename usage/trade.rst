.. _wsapi_general:

交易及账户信息反馈
==================================================


交易指令
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
扩展进程可以通过 :ref:`insert_order` 和 :ref:`cancel_order` 来实现报单及撤单, 注意要点:

* 天勤对于实盘交易和模拟交易使用相同的KEY机制: unit_id + order_id. 这两者都是由下单者指定的任意字符串, 不限长度
* unit_id 为交易单元, 用作委托单的逻辑分组, 用户可以将自己认为有逻辑关联的一批委托单使用同一个unit_id报单, sdk支持按unit_id过滤处理
* order_id 为用户单号, 由下单方任意指定. 同一个 unit_id 下 order_id 应该确保不重复


从主进程接收业务数据
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
当从主进程向扩展进程发送数据时, 与其它很多协议不同, 天勤的通讯协议并不会按照 "类别" 或 "请求", 将数据分解为多个包发送.
相反, 天勤只使用一种包 :ref:`rtn_data`, 来将主程序内存中的全部数据 (实时行情, 历史行情, 交易数据等) 送往扩展进程.
为减少数据量, 主程序每次发送 :ref:`rtn_data` 时, 通常只包含与前次相比有差异的数据. ( **注意: 协议并不承诺无差异的数据一定不会发送** )

基于这一协议, 我们强烈建议 **扩展进程应设法维护一个完整的业务信息存储区** (在内存,数据库或文件中), 并在每次收到 :ref:`rtn_data` 时更新此存储区中的内容.
扩展进程中的业务代码, 应从这一存储区中获取业务信息, 而 **不要直接让业务逻辑处理接收到的每个:ref:`rtn_data`包**

